# -*- coding: utf-8 -*-
"""Music Casino Prototype.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kpe_mnwNtDNywYBfaHurOPHsxyJO45P2

# Welcome to Dice-C's album of Musical Roulette!

#Each time you run the musical roulette cell, a random vocal sample is created, resulting in an entirely new and unique flow. It's hard to predict what will come out of that box!
#Enjoy
#🎰🧧🎲
"""

# @title
#from google.colab import drive
#drive.mount('/mnt/drive')

#Import modules
import librosa as lb
import IPython.display as ipd
import random
import numpy as np

#Import audio
assets = '/content/drive/MyDrive/JUCE/sample_city_assets/assets/'
neil, sr = lb.load(assets + 'neil_talking.wav')
drake, sr = lb.load(assets + 'drake_talking_python.wav')
ash, sr = lb.load(assets + 'pokemon_sound_bit.wav')
trey, sr = lb.load(assets + 'trey_parker_talking.wav')
peter, sr = lb.load(assets + 'peter_talking.wav')
birdman, sr = lb.load(assets + 'birdman_respec.wav')
ariana, sr = lb.load(assets + 'ariana_talking.wav')
kim_yo_jong, sr = lb.load(assets + 'kim_yo_jong_talking.wav')
anime, sr = lb.load(assets + 'anime_talking.wav')
luis, sr = lb.load(assets + 'luis_miguel_talking.wav')
jade, sr = lb.load(assets + 'jade_kush_talking.wav')
floyd, sr = lb.load(assets + 'floyd_mayweather_talking.wav')
rissa_may, sr = lb.load(assets + 'Dice_C_Rissa_May.wav')
columbian_hippos, sr = lb.load(assets + 'Columbian_Hippos.mp3')
gengar, sr = lb.load(assets + 'gengar_beat.wav')
nago, sr = lb.load(assets + 'nago_beat.wav')
bella, sr = lb.load(assets + 'bella_beat.wav')
danbury, sr = lb.load(assets + 'danbury_beat.mp3')
xi, sr = lb.load(assets + 'president_xi_talking_part_2.wav')
ayn, sr, = lb.load(assets + 'ayn_rand_talking.wav')
gengar, sr = lb.load(assets + 'gengar_beat.wav')
jetson, sr = lb.load(assets + 'jetson_beat.wav')
evil, sr = lb.load(assets + 'evil_beat.mp3')
hong_kong, sr = lb.load(assets + 'hong_kong_beat.mp3')
xiaotiantian, sr = lb.load(assets + 'xiaotiantian_beat.wav')
summer_jam, sr = lb.load(assets + 'summer_jam_beat.wav')
gardening, sr = lb.load(assets + 'gardening_beat.wav')
donda, sr = lb.load(assets + 'donda_beat.wav')
eboshi, sr = lb.load(assets + 'eboshi_beat.wav')
euro, sr = lb.load(assets + 'euro_beat.wav')
mononoke, sr = lb.load(assets + 'mononoke_beat.mp3')
python, sr = lb.load(assets + 'python_beat.mp3')
medieval_beat, sr = lb.load(assets + 'medieval_beat.wav')
neil_beat, sr = lb.load(assets + 'neil_beat.wav')
bobby_lee_beat, sr = lb.load(assets + 'bobby_lee_beat.wav')
qweef_beat, sr = lb.load(assets + 'qweef_beat.wav')
kimyojong_beat, sr = lb.load(assets + 'kimyojong_beat.wav')
telenovela_beat, sr = lb.load(assets + 'telenovela_beat.mp3')
wild_card_beat, sr = lb.load(assets + 'wild_card_beat.wav')
hard_beat_flip, sr = lb.load(assets + 'hard_beat_flip.mp3')
talking_list = [neil, drake, ash, xi, trey, peter, birdman, ariana, kim_yo_jong, anime, luis, ayn, jade, floyd]
song_list = [[rissa_may, 88], [gengar, 89], [columbian_hippos, 68.5], [nago, 100.5], [bella, 105], [danbury, 92.5], [jetson, 109.5], \
             [xiaotiantian, 86], [evil,  78.4565], [hong_kong, 92], [summer_jam, 62], [gardening, 84], [donda, 108.5], [euro, 102.5], \
             [eboshi, 90.5], [mononoke, 75.5], [medieval_beat, 80], [python, 74], [neil_beat, 75], [qweef_beat, 77], [bobby_lee_beat, 86], \
             [kimyojong_beat, 96.5], [telenovela_beat, 67], [wild_card_beat, 90], [hard_beat_flip, 90]]

#Musical Backend Function

def talking_backend(q):
  # @
    talking = talking_list[random.randrange(0,len(talking_list))]
    r = random.randrange(0, len(talking)-q*4)
    r2 = random.randrange(0, len(talking)-q*4)
    r3 = random.randrange(0, len(talking)-q*4)
    t = list(talking) + [0]*q*4
    b = t[r:r+q]
    b2 = t[r:r+q*2]
    b3 = t[r2:r2+q]
    b4 = t[r2:r2+q*2]
    b5 = b + b3
    b6 = t[r3:r3+q]
    b7 = t[r3:r2+q*2]
    silence = [0]*(q*6)
    output = list(b)*4 + list(b2)*4 + list(b3)*4 + list(b4)*2 + silence \
    + list(b5)*6 + list(b6)*6 + list(b7)*4 + silence*2
    output = np.asarray(output)

    return output

def random_song():
    r_song = random.randrange(0, len(song_list))
    song = song_list[r_song][0]
    quarter = int((song_list[r_song][1])/60)*sr
    final_talk = talking_backend(quarter)
    dj_play = song[:len(final_talk)] + final_talk
    return dj_play

#Here's the album of musical roulette! I hope it sounds good!
#这是音乐赌场
ipd.Audio(random_song(), rate=sr)

"""#Background
# Dice-C is an aspiring software developer and producer. He is looking for a team to bring the Music Casino to the masses (Django skills, ability to make Python backend into website and app).

#The long-term vision is to add this feature to Spotify and YouTube Music with songs and talking features of anyone's liking. In addition, I believe a feature could be added to record the users voice and sample it over beats, similiar to the Smule app. (Also maybe another feature where you speak English and it teaches you Chinese. AKA you have a person say "she likes Juan" and it spits out the word xihuan喜欢 over a beat so people remember the word xihuan.
#(Attached is my LinkedIn profile.  I graduated from Dartmouth College with a degree in Economics and straight Cs.
#Thanks! 🎲
https://www.linkedin.com/in/charlie-carrera-967905a0/
"""